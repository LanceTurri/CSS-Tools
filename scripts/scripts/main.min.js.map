{"version":3,"sources":["main.ts"],"names":["hexToRgb","hex","shorthandRegex","replace","m","r","g","b","result","exec","parseInt","rgbToHex","toString","slice","createVendorPrefixes","cssString","cssPropertyName","prefixArray","prefixes","prefixesLength","length","stringBuilder","i","appViewModel","self","this","panels","ko","observable","box-shadow","boxShadowViewModel","border-radius","borderRadiusViewModel","rgb-to-hex","rgbToHexViewModel","activeTab","name","data","changeActiveTab","console","log","horizontalLength","verticalLength","blurRadius","spreadRadius","shadowColor","colorType","boxShadow","backgroundColor","boxColor","opacity","outlineOrInset","colorBuilder","computed","boxShadowBuilder","boxShadowString","radiusAll","radiusTopLeft","radiusTopRight","radiusBottomRight","radiusBottomLeft","subscribe","borderColor","borderRadius","borderRadiusBuilder","topLeft","topRight","bottomRight","bottomLeft","borderRadiusString","activeInputHex","hexColor","extend","rateLimit","newValue","hexLength","hexConvert","rgbColor","rgbTemp","split","rgbLength","rgbConvert","rgbArray","rgbString","rgbFormatted","join","$","viewModel","applyBindings"],"mappings":"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","file":"main.min.js","sourcesContent":["/// <reference path=\"../typings/globals/knockout/index.d.ts\" />\n/// <reference path=\"../typings/globals/jquery/index.d.ts\" />\n\n// =============================================================================\n// VIEWMODEL FUNCTIONS\n// =============================================================================\ninterface ColorArray {\n    r: number;\n    g: number;\n    b: number;\n}\n\nfunction hexToRgb(hex: string): ColorArray  {\n    // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n    let shorthandRegex: RegExp = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    hex = hex.replace(shorthandRegex, function(m, r, g, b): string {\n        return r + r + g + g + b + b;\n    });\n\n    let result: RegExpExecArray = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n    } : null;\n}\n\nfunction rgbToHex(r: number, g: number, b: number): string {\n    return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n}\n\nfunction createVendorPrefixes(cssString: string, cssPropertyName: string, prefixArray?: string[]): string {\n    // This will build the code to be put in the <pre> element.\n    let property: string = 'box-shadow';\n    let prefixes: string[] = [\n        '-moz-' + cssPropertyName + ': ',\n        '-webkit-' + cssPropertyName + ': ',\n        cssPropertyName + ': '\n    ];\n    let prefixesLength: number = prefixes.length;\n    let stringBuilder: string = '';\n    let i: number = 0;\n    \n    if ( prefixArray ) {\n        prefixes = prefixArray;\n    }\n    \n    for ( i; i < prefixesLength; i++ ) {\n        stringBuilder += prefixes[i];\n        stringBuilder += cssString + ';';\n        \n        if ( i < prefixesLength - 1 ) {\n            stringBuilder += '\\n';\n        }\n    }\n    \n    return stringBuilder;\n}\n\n// =============================================================================\n// VIEWMODELS\n// =============================================================================\nlet appViewModel = function(): void {\n    const self = this;\n\n    self.panels = ko.observable({\n        \"box-shadow\": new boxShadowViewModel(),\n        \"border-radius\": new borderRadiusViewModel(),\n        \"rgb-to-hex\": new rgbToHexViewModel()\n    });\n\n    // Set default to box-shadow\n    self.activeTab = ko.observable({\n        name: 'box-shadow',\n        data: ko.observable(self.panels()['box-shadow'])\n    });\n\n    self.changeActiveTab = function(name: string): void {\n        console.log(name);\n        self.activeTab().name = name;\n        self.activeTab().data(self.panels()[name]);\n\n        console.log(self.activeTab());\n    }\n};\n\nlet boxShadowViewModel = function(): void {\n    const self = this;\n    \n    self.horizontalLength = ko.observable(10);\n    self.verticalLength = ko.observable(10);\n    self.blurRadius = ko.observable(5);\n    self.spreadRadius = ko.observable(0);\n\n    self.shadowColor = ko.observable('#000000');\n    self.colorType = ko.observable('HEX');\n    self.boxShadow = ko.observable('');\n\n    self.backgroundColor = ko.observable('#f7f7f7');\n    self.boxColor = ko.observable('#f5f5f5');\n\n    self.opacity = ko.observable(0.75);\n    self.outlineOrInset = ko.observable('outline');\n\n    self.colorBuilder = ko.computed(function(): string {\n    \tif (self.colorType() === 'HEX') {\n    \t\treturn self.shadowColor();\n    \t} else if (self.colorType() === 'RGBA') {\n    \t\treturn self.shadowColor().slice(-1) + ', ' + self.opacity() + ')';\n    \t} else {\n    \t\treturn self.shadowColor();\n    \t}\n    });\n\n    self.boxShadowBuilder = ko.computed(function(): string {\n        let horizontalLength: string = self.horizontalLength() + 'px ';\n        let verticalLength: string = self.verticalLength() + 'px ';\n        let blurRadius: string = self.blurRadius() + 'px ';\n        let spreadRadius: string = self.spreadRadius() + 'px ';\n        let colorBuilder: string = self.colorBuilder();\n        \n        let boxShadowString: string = '';\n        \n        // Example string: '-18px 10px 5px 0px #000000'\n        boxShadowString += horizontalLength;\n        boxShadowString += verticalLength;\n        boxShadowString += blurRadius;\n        boxShadowString += spreadRadius;\n        boxShadowString += colorBuilder;\n        \n        // This is responsible for setting the box-shadow inline style\n        self.boxShadow(boxShadowString);\n        \n        return createVendorPrefixes(boxShadowString, 'box-shadow');\n    });\n};\n\nlet borderRadiusViewModel = function(): void {\n\tconst self = this;\n\n\tself.radiusAll = ko.observable(50);\n\tself.radiusTopLeft = ko.observable(50);\n\tself.radiusTopRight = ko.observable(50);\n\tself.radiusBottomRight = ko.observable(50);\n\tself.radiusBottomLeft = ko.observable(50);\n\n\tself.radiusAll.subscribe(function() {\n\t\t// Set all radius to follow the all value\n\t\tself.radiusTopLeft(self.radiusAll());\n\t\tself.radiusTopRight(self.radiusAll());\n\t\tself.radiusBottomRight(self.radiusAll());\n\t\tself.radiusBottomLeft(self.radiusAll());\n\t});\n\n\tself.boxColor = ko.observable('#f5f5f5');\n    self.borderColor = ko.observable('#cccccc');\n    self.borderRadius = ko.observable('');\n\n    self.borderRadiusBuilder = ko.computed(function(): string {\n        let topLeft: string = self.radiusTopLeft() + 'px ';\n        let topRight: string = self.radiusTopRight() + 'px ';\n        let bottomRight: string = self.radiusBottomRight() + 'px ';\n        let bottomLeft: string = self.radiusBottomLeft() + 'px';\n        \n        let borderRadiusString: string = '';\n        \n        borderRadiusString += topLeft;\n        borderRadiusString += topRight;\n        borderRadiusString += bottomRight;\n        borderRadiusString += bottomLeft;\n        \n        self.borderRadius(borderRadiusString);\n        \n    \treturn createVendorPrefixes(borderRadiusString, 'border-radius');\n    });\n}\n\nlet rgbToHexViewModel = function(): void {\n    const self = this;\n\n    self.activeInputHex = null;\n    \n    self.hexColor = ko.observable('').extend({ rateLimit: 100 });\n    self.hexColor.subscribe(function(newValue: string) {\n        let hexLength: number = newValue.replace('#', '').length;\n        \n        if ( (hexLength === 3 || hexLength === 6) && self.activeInputHex ) {\n            self.hexConvert(newValue);\n        }\n        \n        // TODO: Handle edge cases with this feature.\n        self.activeInputHex = true;\n    });\n    \n    self.rgbColor = ko.observable('').extend({ rateLimit: 100 });\n    self.rgbColor.subscribe(function(newValue: string) {\n        let rgbTemp: string[] = newValue.replace('(', '').replace(')', '').split(',');\n        let rgbLength: number = rgbTemp.length;\n        \n        if ( rgbLength === 3 && !self.activeInputHex ) {\n            self.rgbConvert(rgbTemp);\n        }\n        \n        self.activeInputHex = false;\n    });\n    \n    self.rgbConvert = function(rgbArray: any): void {\n        let rgbString: string = rgbToHex(parseInt(rgbArray[0]), parseInt(rgbArray[1]), parseInt(rgbArray[2]));\n        \n        self.hexColor(rgbString);\n    };\n    \n    self.hexConvert = function(hexColor: string): void {\n        let rgbArray: ColorArray = hexToRgb(hexColor);\n        let rgbFormatted: any = [\n            rgbArray.b,\n            rgbArray.g,\n            rgbArray.r\n        ];\n        let rgbString: string = '(' + rgbFormatted.join(', ') + ')';\n        \n        self.rgbColor(rgbString);\n    };\n};\n\n$(function() {\n    const viewModel: void = new appViewModel();\n    ko.applyBindings(viewModel);\n});"],"sourceRoot":"/source/"}