{"version":3,"sources":["app.ts"],"names":["rgbToHex","r","g","b","toString","slice","createVendorPrefixes","cssString","cssPropertyName","prefixArray","prefixes","prefixesLength","length","stringBuilder","i","_this","this","hexToRgb","hex","shorthandRegex","replace","m","result","exec","parseInt","tabViewModel","template","props","computed","amActive","tabName","activeTab","methods","changeTab","$emit","boxShadowResultViewModel","shadowTemplates","simple","horizontalLength","verticalLength","blurRadius","spreadRadius","soft","outline","floating","boxShadowViewModel","data","shadowColor","colorType","boxShadow","backgroundColor","boxColor","opacity","outlineOrInset","layout","colorBuilder","boxShadowBuilder","boxShadowString","components","boxShadowResult","updateShadow","specificTemplate","updateShadowData","borderRadiusResultViewModel","borderRadiusViewModel","radiusAll","radiusTopLeft","radiusTopRight","radiusBottomRight","radiusBottomLeft","borderColor","borderRadius","borderWidth","borderRadiusBuilder","borderRadiusString","borderWidthFormatted","watch","borderRadiusResult","rgbToHexViewModel","activeInputHex","hexColor","rgbColor","newValue","hexLength","hexConvert","rgbTemp","split","rgbConvert","rgbArray","red","green","blue","rgbString","join","app","Vue","el","tab"],"mappings":"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","file":"app.min.js","sourcesContent":["declare var Vue: any;\n\n// =============================================================================\n// VIEWMODEL FUNCTIONS\n// =============================================================================\ninterface IColorArray {\n    r: number;\n    g: number;\n    b: number;\n}\n\ninterface IShadowTemplate {\n    horizontalLength: number;\n    verticalLength: number;\n    blurRadius: number;\n    spreadRadius: number;\n}\n\nconst hexToRgb = (hex: string): IColorArray => {\n    // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n    const shorthandRegex: RegExp = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n\n    hex = hex.replace(shorthandRegex, (m, r, g, b): string => {\n        return r + r + g + g + b + b;\n    });\n\n    const result: RegExpExecArray = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n\n    return result ? {\n        r: parseInt(result[1], 16),\n        // tslint:disable-next-line:object-literal-sort-keys\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16),\n    } : null;\n};\n\nfunction rgbToHex(r: number, g: number, b: number): string {\n    return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n}\n\nfunction createVendorPrefixes(cssString: string, cssPropertyName: string, prefixArray?: string[]): string {\n    // This will build the code to be put in the <pre> element.\n    const property: string = 'box-shadow';\n    let prefixes: string[] = [\n        '-moz-' + cssPropertyName + ': ',\n        '-webkit-' + cssPropertyName + ': ',\n        cssPropertyName + ': ',\n    ];\n    const prefixesLength: number = prefixes.length;\n    let stringBuilder: string = \"\";\n    let i: number = 0;\n\n    if ( prefixArray ) {\n        prefixes = prefixArray;\n    }\n\n    for ( i; i < prefixesLength; i++ ) {\n        stringBuilder += prefixes[i];\n        stringBuilder += cssString + ';';\n\n        if ( i < prefixesLength - 1 ) {\n            stringBuilder += '\\n';\n        }\n    }\n\n    return stringBuilder;\n}\n\n// =============================================================================\n// TAB VIEWMODELS\n// =============================================================================\nconst tabViewModel = {\n    template: '#tab',\n    props: [\n        'activeTab',\n        'tabName',\n        'iconClass',\n    ],\n    computed: {\n        amActive() {\n            if (this.tabName === this.activeTab) {\n                return true;\n            }\n\n            return false;\n        },\n    },\n    methods: {\n        changeTab() {\n            this.$emit('changetab');\n        },\n    },\n};\n\n// =============================================================================\n// BOX SHADOW VIEWMODEL\n// =============================================================================\nconst boxShadowResultViewModel = {\n    template: '#box-shadow-result',\n    props: [\n        'boxShadow',\n        'boxColor',\n        'boxShadowBuilder',\n        'layout',\n    ],\n};\n\nconst shadowTemplates: { [name: string]: IShadowTemplate } = {\n    simple: {\n        horizontalLength: 10,\n        verticalLength: 10,\n        blurRadius: 20,\n        spreadRadius: 0,\n    },\n    soft: {\n        horizontalLength: 10,\n        verticalLength: 10,\n        blurRadius: 80,\n        spreadRadius: -10,\n    },\n    outline: {\n        horizontalLength: 5,\n        verticalLength: 5,\n        blurRadius: 5,\n        spreadRadius: 0,\n    },\n    floating: {\n        horizontalLength: 30,\n        verticalLength: 25,\n        blurRadius: 80,\n        spreadRadius: 8,\n    },\n};\n\nconst boxShadowViewModel = {\n    template: '#box-shadow',\n    data: () => {\n        return {\n            horizontalLength: 10,\n            verticalLength: 10,\n            blurRadius: 80,\n            spreadRadius: -10,\n            shadowColor: '#999999',\n            colorType: 'HEX',\n            boxShadow: '',\n            backgroundColor: '#f7f7f7',\n            boxColor: '#f5f5f5',\n            opacity: 0.75,\n            outlineOrInset: 'outline',\n            layout: 'multiple',\n        };\n    },\n    computed: {\n        colorBuilder() {\n            switch (this.shadowColor) {\n                case 'HEX':\n                    return this.shadowColor;\n\n                case 'RGBA':\n                    return `${this.shadowColor.slice(-1)}, ${this.opacity})`;\n\n                default:\n                    return this.shadowColor;\n            }\n        },\n        boxShadowBuilder() {\n            const horizontalLength: string = `${this.horizontalLength}px `;\n            const verticalLength: string = `${this.verticalLength}px `;\n            const blurRadius: string = `${this.blurRadius}px `;\n            const spreadRadius: string = `${this.spreadRadius}px `;\n            const colorBuilderString: string = `${this.colorBuilder}`;\n            let boxShadowString: string = '';\n\n            // Example string: '-18px 10px 5px 0px #000000'\n            boxShadowString += horizontalLength;\n            boxShadowString += verticalLength;\n            boxShadowString += blurRadius;\n            boxShadowString += spreadRadius;\n            boxShadowString += colorBuilderString;\n\n            // This is responsible for setting the box-shadow inline style\n            this.boxShadow = boxShadowString;\n\n            return createVendorPrefixes(boxShadowString, 'box-shadow');\n        },\n    },\n    components: {\n        boxShadowResult: boxShadowResultViewModel,\n    },\n    methods: {\n        updateShadow(template: string) {\n            const specificTemplate: IShadowTemplate = shadowTemplates[template] as any;\n            this.updateShadowData(specificTemplate);\n        },\n        updateShadowData(data: IShadowTemplate) {\n            this.horizontalLength = data.horizontalLength;\n            this.verticalLength = data.verticalLength;\n            this.blurRadius = data.blurRadius;\n            this.spreadRadius = data.spreadRadius;\n        },\n    },\n};\n\n// =============================================================================\n// BORDER RADIUS VIEWMODEL\n// =============================================================================\nconst borderRadiusResultViewModel = {\n    template: '#border-radius-result',\n    props: [\n        'borderRadius',\n        'boxColor',\n        'borderColor',\n        'borderRadiusBuilder',\n        'borderWidth',\n    ],\n};\n\nconst borderRadiusViewModel = {\n    template: '#border-radius',\n    data: () => {\n        return {\n            radiusAll: 50,\n            radiusTopLeft: 50,\n            radiusTopRight: 50,\n            radiusBottomRight: 50,\n            radiusBottomLeft: 50,\n            boxColor: '#f5f5f5',\n            borderColor: '#00b8d4',\n            borderRadius: '',\n            borderWidth: 3,\n        };\n    },\n    computed: {\n        borderRadiusBuilder() {\n            const topLeft: string = `${this.radiusTopLeft}px `;\n            const topRight: string = `${this.radiusTopRight}px `;\n            const bottomRight: string = `${this.radiusBottomRight}px `;\n            const bottomLeft: string = `${this.radiusBottomLeft}px`;\n\n            let borderRadiusString: string = '';\n\n            borderRadiusString += topLeft;\n            borderRadiusString += topRight;\n            borderRadiusString += bottomRight;\n            borderRadiusString += bottomLeft;\n\n            this.borderRadius = borderRadiusString;\n\n            return createVendorPrefixes(borderRadiusString, 'border-radius');\n        },\n        borderWidthFormatted() {\n            return `${this.borderWidth}px`;\n        },\n    },\n    watch: {\n        radiusAll() {\n            // Set all radius to follow the all value\n            this.radiusTopLeft = this.radiusAll;\n            this.radiusTopRight = this.radiusAll;\n            this.radiusBottomRight = this.radiusAll;\n            this.radiusBottomLeft = this.radiusAll;\n        },\n    },\n    components: {\n        borderRadiusResult: borderRadiusResultViewModel,\n    },\n};\n\n// =============================================================================\n// RGB TO HEX VIEWMODEL\n// =============================================================================\nconst rgbToHexViewModel = {\n    data: () => {\n        return {\n            activeInputHex: false,\n            hexColor: '',\n            rgbColor: '',\n        };\n    },\n    watch: {\n        hexColor: (newValue: string) => {\n            const hexLength: number = newValue.replace('#', '').length;\n\n            if ( (hexLength === 3 || hexLength === 6) && this.activeInputHex ) {\n                this.hexConvert(newValue);\n            }\n\n            // TODO: Handle edge cases with this feature.\n            this.activeInputHex = true;\n        },\n        rgbColor: (newValue: string) => {\n            const rgbTemp: string[] = newValue.replace('(', '').replace(')', '').split(',');\n            const rgbLength: number = rgbTemp.length;\n\n            if ( rgbLength === 3 && !this.activeInputHex ) {\n                this.rgbConvert(rgbTemp);\n            }\n\n            this.activeInputHex = false;\n        },\n\n    },\n    methods: {\n        rgbConvert(rgbArray: any): void {\n            const red = parseInt(rgbArray[0], 10);\n            const green = parseInt(rgbArray[1], 10);\n            const blue = parseInt(rgbArray[2], 10);\n\n            this.hexColor(rgbToHex(red, green, blue));\n        },\n        hexConvert(hexColor: string): void {\n            const rgbArray: IColorArray = hexToRgb(hexColor);\n            const rgbFormatted: any = [\n                rgbArray.b,\n                rgbArray.g,\n                rgbArray.r,\n            ];\n            const rgbString: string = '(' + rgbFormatted.join(', ') + ')';\n\n            this.rgbColor(rgbString);\n        },\n    },\n};\n\n// =============================================================================\n// INITIATE FUNCTION\n// =============================================================================\ninterface IMainViewModel {\n    activeTab: string;\n}\n\nconst app = new Vue({\n    el: \"#app\",\n    data: {\n        activeTab: 'boxShadow',\n    },\n    components: {\n        boxShadow: boxShadowViewModel,\n        borderRadius: borderRadiusViewModel,\n        tab: tabViewModel,\n    },\n});\n"]}