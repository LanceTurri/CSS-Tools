{"version":3,"sources":["app.ts"],"names":["rgbToHex","r","g","b","toString","slice","createVendorPrefixes","cssString","cssPropertyName","prefixArray","prefixes","prefixesLength","length","stringBuilder","i","hexToRgb","hex","shorthandRegex","replace","m","result","exec","parseInt","boxShadowResultViewModel","template","props","boxShadowViewModel","data","horizontalLength","verticalLength","blurRadius","spreadRadius","shadowColor","colorType","boxShadow","backgroundColor","boxColor","opacity","outlineOrInset","computed","colorBuilder","this","boxShadowBuilder","colorBuilderString","boxShadowString","components","boxShadowResult","borderRadiusViewModel","radiusAll","radiusTopLeft","radiusTopRight","radiusBottomRight","radiusBottomLeft","borderColor","borderRadius","borderRadiusBuilder","topLeft","topRight","bottomRight","bottomLeft","borderRadiusString","watch","app","Vue","el","activeTab"],"mappings":"AA6BA,QAAAA,UAAkBC,EAAWC,EAAWC,GACpC,MAAO,MAAQ,GAAK,KAAOF,GAAK,KAAOC,GAAK,GAAKC,GAAGC,SAAS,IAAIC,MAAM,GAG3E,QAAAC,sBAA8BC,EAAmBC,EAAyBC,GAEtE,GACIC,IACA,QAAUF,EAAkB,KAC5B,WAAaA,EAAkB,KAC/BA,EAAkB,MAEhBG,EAAyBD,EAASE,OACpCC,EAAwB,GACxBC,EAAY,CAMhB,KAJKL,IACDC,EAAWD,GAGTK,EAAGA,EAAIH,EAAgBG,IACzBD,GAAiBH,EAASI,GAC1BD,GAAiBN,EAAY,IAExBO,EAAIH,EAAiB,IACtBE,GAAiB,KAIzB,OAAOA,GA/CX,GAAME,UAAW,SAACC,GAEd,GAAMC,GAAyB,kCAE/BD,GAAMA,EAAIE,QAAQD,EAAgB,SAACE,EAAGlB,EAAGC,EAAGC,GACxC,MAAOF,GAAIA,EAAIC,EAAIA,EAAIC,EAAIA,GAG/B,IAAMiB,GAA0B,4CAA4CC,KAAKL,EAEjF,OAAOI,IACHnB,EAAGqB,SAASF,EAAO,GAAI,IAEvBlB,EAAGoB,SAASF,EAAO,GAAI,IACvBjB,EAAGmB,SAASF,EAAO,GAAI,KACvB,MAsCFG,0BACFC,SAAU,qBACVC,OACI,YACA,WACA,qBAIFC,oBACFF,SAAU,cACVG,KAAM,WACF,OACIC,iBAAkB,GAClBC,eAAgB,GAChBC,WAAY,EACZC,aAAc,EACdC,YAAa,UACbC,UAAW,MACXC,UAAW,GACXC,gBAAiB,UACjBC,SAAU,UACVC,QAAS,IACTC,eAAgB,YAGxBC,UACIC,aAAY,WACR,OAAQC,KAAKT,aACT,IAAK,MACD,MAAOS,MAAKT,WAEhB,KAAK,OACD,MAAUS,MAAKT,YAAY3B,UAAS,KAAKoC,KAAKJ,QAAO,GAEzD,SACI,MAAOI,MAAKT,cAGxBU,iBAAgB,WACZ,GAAMd,GAA8Ba,KAAKb,iBAAgB,MACnDC,EAA4BY,KAAKZ,eAAc,MAC/CC,EAAwBW,KAAKX,WAAU,MACvCC,EAA0BU,KAAKV,aAAY,MAC3CY,EAA6B,GAAGF,KAAKD,aACvCI,EAA0B,EAY9B,OATAA,IAAmBhB,EACnBgB,GAAmBf,EACnBe,GAAmBd,EACnBc,GAAmBb,EACnBa,GAAmBD,EAGnBF,KAAKP,UAAYU,EAEVtC,qBAAqBsC,EAAiB,gBAGrDC,YACIC,gBAAiBvB,2BAOnBwB,uBACFvB,SAAU,iBACVG,KAAM,WACF,OACIqB,UAAW,GACXC,cAAe,GACfC,eAAgB,GAChBC,kBAAmB,GACnBC,iBAAkB,GAClBhB,SAAU,UACViB,YAAa,UACbC,aAAc,KAGtBf,UACIgB,oBAAmB,WACf,GAAMC,GAAqBf,KAAKQ,cAAa,MACvCQ,EAAsBhB,KAAKS,eAAc,MACzCQ,EAAyBjB,KAAKU,kBAAiB,MAC/CQ,EAAwBlB,KAAKW,iBAAgB,KAE/CQ,EAA6B,EASjC,OAPAA,IAAsBJ,EACtBI,GAAsBH,EACtBG,GAAsBF,EACtBE,GAAsBD,EAEtBlB,KAAKa,aAAeM,EAEbtD,qBAAqBsD,EAAoB,mBAGxDC,OACIb,UAAS,WAELP,KAAKQ,cAAgBR,KAAKO,UAC1BP,KAAKS,eAAiBT,KAAKO,UAC3BP,KAAKU,kBAAoBV,KAAKO,UAC9BP,KAAKW,iBAAmBX,KAAKO,aA+DnCc,IAAM,GAAIC,MACZC,GAAI,OACJrC,MACIsC,UAAW,aAEfpB,YACIX,UAAWR,mBACX4B,aAAcP","file":"app.min.js","sourcesContent":["declare var Vue: any;\n\n// =============================================================================\n// VIEWMODEL FUNCTIONS\n// =============================================================================\ninterface IColorArray {\n    r: number;\n    g: number;\n    b: number;\n}\n\nconst hexToRgb = (hex: string): IColorArray => {\n    // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n    const shorthandRegex: RegExp = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n\n    hex = hex.replace(shorthandRegex, (m, r, g, b): string => {\n        return r + r + g + g + b + b;\n    });\n\n    const result: RegExpExecArray = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n\n    return result ? {\n        r: parseInt(result[1], 16),\n        // tslint:disable-next-line:object-literal-sort-keys\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16),\n    } : null;\n};\n\nfunction rgbToHex(r: number, g: number, b: number): string {\n    return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n}\n\nfunction createVendorPrefixes(cssString: string, cssPropertyName: string, prefixArray?: string[]): string {\n    // This will build the code to be put in the <pre> element.\n    const property: string = 'box-shadow';\n    let prefixes: string[] = [\n        '-moz-' + cssPropertyName + ': ',\n        '-webkit-' + cssPropertyName + ': ',\n        cssPropertyName + ': ',\n    ];\n    const prefixesLength: number = prefixes.length;\n    let stringBuilder: string = \"\";\n    let i: number = 0;\n\n    if ( prefixArray ) {\n        prefixes = prefixArray;\n    }\n\n    for ( i; i < prefixesLength; i++ ) {\n        stringBuilder += prefixes[i];\n        stringBuilder += cssString + ';';\n\n        if ( i < prefixesLength - 1 ) {\n            stringBuilder += '\\n';\n        }\n    }\n\n    return stringBuilder;\n}\n\n// =============================================================================\n// BOX SHADOW VIEWMODEL\n// =============================================================================\nconst boxShadowResultViewModel = {\n    template: '#box-shadow-result',\n    props: [\n        'boxShadow',\n        'boxColor',\n        'boxShadowBuilder',\n    ],\n};\n\nconst boxShadowViewModel = {\n    template: '#box-shadow',\n    data: () => {\n        return {\n            horizontalLength: 10,\n            verticalLength: 10,\n            blurRadius: 5,\n            spreadRadius: 0,\n            shadowColor: '#000000',\n            colorType: 'HEX',\n            boxShadow: '',\n            backgroundColor: '#f7f7f7',\n            boxColor: '#f5f5f5',\n            opacity: 0.75,\n            outlineOrInset: 'outline',\n        };\n    },\n    computed: {\n        colorBuilder() {\n            switch (this.shadowColor) {\n                case 'HEX':\n                    return this.shadowColor;\n\n                case 'RGBA':\n                    return `${this.shadowColor.slice(-1)}, ${this.opacity})`;\n\n                default:\n                    return this.shadowColor;\n            }\n        },\n        boxShadowBuilder() {\n            const horizontalLength: string = `${this.horizontalLength}px `;\n            const verticalLength: string = `${this.verticalLength}px `;\n            const blurRadius: string = `${this.blurRadius}px `;\n            const spreadRadius: string = `${this.spreadRadius}px `;\n            const colorBuilderString: string = `${this.colorBuilder}`;\n            let boxShadowString: string = '';\n\n            // Example string: '-18px 10px 5px 0px #000000'\n            boxShadowString += horizontalLength;\n            boxShadowString += verticalLength;\n            boxShadowString += blurRadius;\n            boxShadowString += spreadRadius;\n            boxShadowString += colorBuilderString;\n\n            // This is responsible for setting the box-shadow inline style\n            this.boxShadow = boxShadowString;\n\n            return createVendorPrefixes(boxShadowString, 'box-shadow');\n        },\n    },\n    components: {\n        boxShadowResult: boxShadowResultViewModel,\n    },\n};\n\n// =============================================================================\n// BORDER RADIUS VIEWMODEL\n// =============================================================================\nconst borderRadiusViewModel = {\n    template: '#border-radius',\n    data: () => {\n        return {\n            radiusAll: 50,\n            radiusTopLeft: 50,\n            radiusTopRight: 50,\n            radiusBottomRight: 50,\n            radiusBottomLeft: 50,\n            boxColor: '#f5f5f5',\n            borderColor: '#cccccc',\n            borderRadius: '',\n        };\n    },\n    computed: {\n        borderRadiusBuilder() {\n            const topLeft: string = `${this.radiusTopLeft}px `;\n            const topRight: string = `${this.radiusTopRight}px `;\n            const bottomRight: string = `${this.radiusBottomRight}px `;\n            const bottomLeft: string = `${this.radiusBottomLeft}px`;\n\n            let borderRadiusString: string = '';\n\n            borderRadiusString += topLeft;\n            borderRadiusString += topRight;\n            borderRadiusString += bottomRight;\n            borderRadiusString += bottomLeft;\n\n            this.borderRadius = borderRadiusString;\n\n            return createVendorPrefixes(borderRadiusString, 'border-radius');\n        },\n    },\n    watch: {\n        radiusAll() {\n            // Set all radius to follow the all value\n            this.radiusTopLeft = this.radiusAll;\n            this.radiusTopRight = this.radiusAll;\n            this.radiusBottomRight = this.radiusAll;\n            this.radiusBottomLeft = this.radiusAll;\n        },\n    },\n};\n\n// =============================================================================\n// RGB TO HEX VIEWMODEL\n// =============================================================================\n// class rgbToHexViewModel {\n//     constructor() {\n//         this.activeInputHex = null;\n\n//         this.hexColor = ko.observable('').extend({ rateLimit: 100 });\n//         this.hexColor.subscribe(function(newValue: string) {\n//             let hexLength: number = newValue.replace('#', '').length;\n\n//             if ( (hexLength === 3 || hexLength === 6) && this.activeInputHex ) {\n//                 this.hexConvert(newValue);\n//             }\n\n//             // TODO: Handle edge cases with this feature.\n//             this.activeInputHex = true;\n//         });\n\n//         this.rgbColor = ko.observable('').extend({ rateLimit: 100 });\n//         this.rgbColor.subscribe(function(newValue: string) {\n//             let rgbTemp: string[] = newValue.replace('(', '').replace(')', '').split(',');\n//             let rgbLength: number = rgbTemp.length;\n\n//             if ( rgbLength === 3 && !this.activeInputHex ) {\n//                 this.rgbConvert(rgbTemp);\n//             }\n\n//             this.activeInputHex = false;\n//         });\n\n//         this.rgbConvert = function(rgbArray: any): void {\n//             let rgbString: string = rgbToHex(parseInt(rgbArray[0]), parseInt(rgbArray[1]), parseInt(rgbArray[2]));\n\n//             this.hexColor(rgbString);\n//         };\n\n//         this.hexConvert = function(hexColor: string): void {\n//             let rgbArray: ColorArray = hexToRgb(hexColor);\n//             let rgbFormatted: any = [\n//                 rgbArray.b,\n//                 rgbArray.g,\n//                 rgbArray.r\n//             ];\n//             let rgbString: string = '(' + rgbFormatted.join(', ') + ')';\n\n//             this.rgbColor(rgbString);\n//         };\n//     }\n// }\n\n// =============================================================================\n// INITIATE FUNCTION\n// =============================================================================\ninterface IMainViewModel {\n    activeTab: string;\n}\n\nconst app = new Vue({\n    el: \"#app\",\n    data: {\n        activeTab: 'boxShadow',\n    },\n    components: {\n        boxShadow: boxShadowViewModel,\n        borderRadius: borderRadiusViewModel,\n    },\n});\n"]}