{"version":3,"sources":["app.ts"],"names":["_this","this","Utils","prototype","hexToRgb","hex","shorthandRegex","replace","m","r","g","b","result","exec","parseInt","rgbToHex","toString","slice","createVendorPrefixes","cssString","cssPropertyName","prefixArray","prefixes","prefixesLength","length","stringBuilder","forEach","prefix","index","tabViewModel","template","props","computed","amActive","tabName","activeTab","methods","changeTab","$emit","boxShadowResultViewModel","shadowTemplates","simple","horizontalLength","verticalLength","blurRadius","spreadRadius","soft","outline","floating","boxShadowViewModel","data","shadowColor","colorType","boxShadow","backgroundColor","boxColor","opacity","outlineOrInset","layout","colorBuilder","boxShadowBuilder","boxShadowString","property","value","utils","components","boxShadowResult","updateShadow","specificTemplate","updateShadowData","borderRadiusResultViewModel","borderRadiusViewModel","radiusAll","radiusTopLeft","radiusTopRight","radiusBottomRight","radiusBottomLeft","borderColor","borderRadius","borderWidth","borderRadiusBuilder","borderRadiusString","borderWidthFormatted","watch","borderRadiusResult","triangleResultViewModel","triangleViewModel","triangleDirection","triangleHeight","triangleLeft","triangleRight","triangleColor","triangleStyle","triangleCss","triangleBuilder","triangleString","Error","triangleResult","rgbToHexViewModel","activeInputHex","hexColor","rgbColor","newValue","hexLength","hexConvert","rgbTemp","split","rgbConvert","rgbArray","red","green","blue","rgbString","join","app","Vue","el","sharedData","shadow","radius","triangle","tab","updateProperty","updateObject","console","warn"],"mappings":"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","file":"app.min.js","sourcesContent":["declare var Vue: any;\n\n// =============================================================================\n// VIEWMODEL FUNCTIONS\n// =============================================================================\nclass Utils {\n    public hexToRgb(hex: string): IColorArray {\n        // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n        const shorthandRegex: RegExp = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n\n        hex = hex.replace(shorthandRegex, (m, r, g, b): string => {\n            return r + r + g + g + b + b;\n        });\n\n        const result: RegExpExecArray = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n\n        return result ? {\n            r: parseInt(result[1], 16),\n            // tslint:disable-next-line:object-literal-sort-keys\n            g: parseInt(result[2], 16),\n            b: parseInt(result[3], 16),\n        } : null;\n    }\n\n    public rgbToHex(r: number, g: number, b: number): string {\n        return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n    }\n\n    public createVendorPrefixes(cssString: string, cssPropertyName: string, prefixArray?: string[]): string {\n        // This will build the code to be put in the <pre> element.\n        const property: string = 'box-shadow';\n        let prefixes: string[] = [\n            '-moz-' + cssPropertyName + ': ',\n            '-webkit-' + cssPropertyName + ': ',\n            cssPropertyName + ': ',\n        ];\n        const prefixesLength: number = prefixes.length;\n        let stringBuilder: string = \"\";\n\n        if ( prefixArray ) {\n            prefixes = prefixArray;\n        }\n\n        prefixes.forEach((prefix, index) => {\n            stringBuilder += prefix;\n            stringBuilder += cssString + ';';\n\n            // If this is the last prefix, don't add a newline at the end.\n            if ( index < prefixesLength - 1 ) {\n                stringBuilder += '\\n';\n            }\n        });\n\n        return stringBuilder;\n    }\n}\n\n// =============================================================================\n// TAB VIEWMODELS\n// =============================================================================\nconst tabViewModel = {\n    template: '#tab',\n    props: [\n        'activeTab',\n        'tabName',\n        'iconClass',\n    ],\n    computed: {\n        amActive() {\n            if (this.tabName === this.activeTab) {\n                return true;\n            }\n\n            return false;\n        },\n    },\n    methods: {\n        changeTab() {\n            this.$emit('changetab');\n        },\n    },\n};\n\n// =============================================================================\n// BOX SHADOW VIEWMODEL\n// =============================================================================\nconst boxShadowResultViewModel = {\n    template: '#box-shadow-result',\n    props: [\n        'parent',\n        'boxShadow',\n        'boxColor',\n        'boxShadowBuilder',\n        'layout',\n    ],\n};\n\nconst shadowTemplates: { [name: string]: IShadowTemplate } = {\n    simple: {\n        horizontalLength: 10,\n        verticalLength: 10,\n        blurRadius: 20,\n        spreadRadius: 0,\n    },\n    soft: {\n        horizontalLength: 10,\n        verticalLength: 10,\n        blurRadius: 80,\n        spreadRadius: -10,\n    },\n    outline: {\n        horizontalLength: 5,\n        verticalLength: 5,\n        blurRadius: 5,\n        spreadRadius: 0,\n    },\n    floating: {\n        horizontalLength: 30,\n        verticalLength: 25,\n        blurRadius: 80,\n        spreadRadius: 8,\n    },\n};\n\nconst boxShadowViewModel = {\n    template: '#box-shadow',\n    props: [\n        'parent',\n    ],\n    data: () => {\n        return {\n            horizontalLength: 10,\n            verticalLength: 10,\n            blurRadius: 80,\n            spreadRadius: -10,\n            shadowColor: '#999999',\n            colorType: 'HEX',\n            boxShadow: '',\n            backgroundColor: '#f7f7f7',\n            boxColor: '#f5f5f5',\n            opacity: 0.75,\n            outlineOrInset: 'outline',\n            layout: 'multiple',\n        };\n    },\n    computed: {\n        colorBuilder() {\n            switch (this.shadowColor) {\n                case 'HEX':\n                    return this.shadowColor;\n\n                case 'RGBA':\n                    return `${this.shadowColor.slice(-1)}, ${this.opacity})`;\n\n                default:\n                    return this.shadowColor;\n            }\n        },\n        boxShadowBuilder() {\n            const horizontalLength: string = `${this.horizontalLength}px `;\n            const verticalLength: string = `${this.verticalLength}px `;\n            const blurRadius: string = `${this.blurRadius}px `;\n            const spreadRadius: string = `${this.spreadRadius}px `;\n            const colorBuilderString: string = `${this.colorBuilder}`;\n            let boxShadowString: string = '';\n\n            // Example string: '-18px 10px 5px 0px #000000'\n            boxShadowString += horizontalLength;\n            boxShadowString += verticalLength;\n            boxShadowString += blurRadius;\n            boxShadowString += spreadRadius;\n            boxShadowString += colorBuilderString;\n\n            // This is responsible for setting the box-shadow inline style\n            this.boxShadow = boxShadowString;\n\n            // Update the parent properties to share.\n            this.$emit('update-property', { property: 'box-shadow', value: boxShadowString });\n\n            return utils.createVendorPrefixes(boxShadowString, 'box-shadow');\n        },\n    },\n    components: {\n        boxShadowResult: boxShadowResultViewModel,\n    },\n    methods: {\n        updateShadow(template: string) {\n            const specificTemplate: IShadowTemplate = shadowTemplates[template] as any;\n            this.updateShadowData(specificTemplate);\n        },\n        updateShadowData(data: IShadowTemplate) {\n            this.horizontalLength = data.horizontalLength;\n            this.verticalLength = data.verticalLength;\n            this.blurRadius = data.blurRadius;\n            this.spreadRadius = data.spreadRadius;\n        },\n    },\n};\n\n// =============================================================================\n// BORDER RADIUS VIEWMODEL\n// =============================================================================\nconst borderRadiusResultViewModel = {\n    template: '#border-radius-result',\n    props: [\n        'parent',\n        'borderRadius',\n        'boxColor',\n        'borderColor',\n        'borderRadiusBuilder',\n        'borderWidth',\n    ],\n};\n\nconst borderRadiusViewModel = {\n    template: '#border-radius',\n    props: [\n        'parent',\n    ],\n    data: () => {\n        return {\n            radiusAll: 5,\n            radiusTopLeft: 5,\n            radiusTopRight: 5,\n            radiusBottomRight: 5,\n            radiusBottomLeft: 5,\n            boxColor: '#f5f5f5',\n            borderColor: '#00b8d4',\n            borderRadius: '',\n            borderWidth: 3,\n        };\n    },\n    computed: {\n        borderRadiusBuilder() {\n            const topLeft: string = `${this.radiusTopLeft}px `;\n            const topRight: string = `${this.radiusTopRight}px `;\n            const bottomRight: string = `${this.radiusBottomRight}px `;\n            const bottomLeft: string = `${this.radiusBottomLeft}px`;\n\n            let borderRadiusString: string = '';\n\n            borderRadiusString += topLeft;\n            borderRadiusString += topRight;\n            borderRadiusString += bottomRight;\n            borderRadiusString += bottomLeft;\n\n            this.borderRadius = borderRadiusString;\n            this.$emit('update-property', { property: 'border-radius', value: borderRadiusString });\n\n            return utils.createVendorPrefixes(borderRadiusString, 'border-radius');\n        },\n        borderWidthFormatted() {\n            return `${this.borderWidth}px`;\n        },\n    },\n    watch: {\n        radiusAll() {\n            // Set all radius to follow the all value\n            this.radiusTopLeft = this.radiusAll;\n            this.radiusTopRight = this.radiusAll;\n            this.radiusBottomRight = this.radiusAll;\n            this.radiusBottomLeft = this.radiusAll;\n        },\n    },\n    components: {\n        borderRadiusResult: borderRadiusResultViewModel,\n    },\n};\n\n// =============================================================================\n// BORDER RADIUS VIEWMODEL\n// =============================================================================\nconst triangleResultViewModel = {\n    template: '#triangle-result',\n    props: [\n        'triangleDirection',\n        'triangleHeight',\n        'triangleLeft',\n        'triangleRight',\n        'triangleColor',\n        'triangleBuilder',\n        'triangleStyle',\n        'triangleCss',\n    ],\n};\n\nconst triangleViewModel = {\n    template: '#triangle',\n    props: [\n        'parent',\n    ],\n    data: () => {\n        return {\n            triangleDirection: 'top',\n            triangleHeight: 100,\n            triangleLeft: 80,\n            triangleRight: 80,\n            triangleColor: '#333333',\n            triangleStyle: '',\n            triangleCss: '',\n        };\n    },\n    computed: {\n        triangleBuilder() {\n            const triangleString = {} as ITriangleProperties;\n\n            switch (this.triangleDirection) {\n                case 'top':\n                    triangleString['border-left'] = `${this.triangleLeft}px solid transparent`;\n                    triangleString['border-right'] = `${this.triangleRight}px solid transparent`;\n                    triangleString['border-top'] = `0`;\n                    triangleString['border-bottom'] = `${this.triangleHeight}px solid ${this.triangleColor}`;\n                    break;\n\n                case 'bottom':\n                    triangleString['border-left'] = `${this.triangleLeft}px solid transparent`;\n                    triangleString['border-right'] = `${this.triangleRight}px solid transparent`;\n                    triangleString['border-top'] = `${this.triangleHeight}px solid ${this.triangleColor}`;\n                    triangleString['border-bottom'] = `0`;\n                    break;\n\n                case 'left':\n                    triangleString['border-left'] = `${this.triangleHeight}px solid ${this.triangleColor}`;\n                    triangleString['border-right'] = `0`;\n                    triangleString['border-top'] = `${this.triangleRight}px solid transparent`;\n                    triangleString['border-bottom'] = `${this.triangleLeft}px solid transparent`;\n                    break;\n\n                case 'right':\n                    triangleString['border-left'] = `0`;\n                    triangleString['border-right'] = `${this.triangleHeight}px solid ${this.triangleColor}`;\n                    triangleString['border-top'] = `${this.triangleLeft}px solid transparent`;\n                    triangleString['border-bottom'] = `${this.triangleRight}px solid transparent`;\n                    break;\n\n                default:\n                    throw new Error('An unrecognized Triangle direction was set.');\n            }\n\n            this.triangleCss = `border-top: ${triangleString['border-top']};\\n`;\n            this.triangleCss += `border-bottom: ${triangleString['border-bottom']};\\n`;\n            this.triangleCss += `border-left: ${triangleString['border-left']};\\n`;\n            this.triangleCss += `border-right: ${triangleString['border-right']};`;\n\n            return triangleString;\n        },\n    },\n    components: {\n        triangleResult: triangleResultViewModel,\n    },\n};\n\n// =============================================================================\n// RGB TO HEX VIEWMODEL\n// =============================================================================\nconst rgbToHexViewModel = {\n    data: () => {\n        return {\n            activeInputHex: false,\n            hexColor: '',\n            rgbColor: '',\n        };\n    },\n    watch: {\n        hexColor: (newValue: string) => {\n            const hexLength: number = newValue.replace('#', '').length;\n\n            if ( (hexLength === 3 || hexLength === 6) && this.activeInputHex ) {\n                this.hexConvert(newValue);\n            }\n\n            // TODO: Handle edge cases with this feature.\n            this.activeInputHex = true;\n        },\n        rgbColor: (newValue: string) => {\n            const rgbTemp: string[] = newValue.replace('(', '').replace(')', '').split(',');\n            const rgbLength: number = rgbTemp.length;\n\n            if ( rgbLength === 3 && !this.activeInputHex ) {\n                this.rgbConvert(rgbTemp);\n            }\n\n            this.activeInputHex = false;\n        },\n\n    },\n    methods: {\n        rgbConvert(rgbArray: any): void {\n            const red = parseInt(rgbArray[0], 10);\n            const green = parseInt(rgbArray[1], 10);\n            const blue = parseInt(rgbArray[2], 10);\n\n            this.hexColor(utils.rgbToHex(red, green, blue));\n        },\n        hexConvert(hexColor: string): void {\n            const rgbArray: IColorArray = utils.hexToRgb(hexColor);\n            const rgbFormatted: any = [\n                rgbArray.b,\n                rgbArray.g,\n                rgbArray.r,\n            ];\n            const rgbString: string = '(' + rgbFormatted.join(', ') + ')';\n\n            this.rgbColor(rgbString);\n        },\n    },\n};\n\n// =============================================================================\n// INITIATE FUNCTION\n// =============================================================================\nconst utils = new Utils();\n\ninterface IMainViewModel {\n    activeTab: string;\n}\n\nconst app: IMainViewModel = new Vue({\n    el: \"#app\",\n    data: {\n        activeTab: 'box-shadow',\n        sharedData: {\n            shadow: '10px 10px 80px -10px #999999',\n            radius: '5px',\n        },\n    },\n    components: {\n        boxShadow: boxShadowViewModel,\n        borderRadius: borderRadiusViewModel,\n        triangle: triangleViewModel,\n        tab: tabViewModel,\n    },\n    methods: {\n        updateProperty(updateObject: { property: string, value: string }) {\n            switch (updateObject.property) {\n                case 'box-shadow':\n                    this.sharedData.shadow = updateObject.value;\n                    break;\n\n                case 'border-radius':\n                    this.sharedData.radius = updateObject.value;\n                    break;\n\n                default:\n                    console.warn('Property name did not match any known value.');\n                    break;\n            }\n        },\n    },\n});\n"]}